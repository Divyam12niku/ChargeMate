// Generated by view binder compiler. Do not edit!
package com.chargemate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Switch;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.chargemate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button testA;

  @NonNull
  public final Button testB;

  @NonNull
  public final Button testC;

  @NonNull
  public final Switch toggleA;

  @NonNull
  public final Switch toggleB;

  @NonNull
  public final Switch toggleC;

  private ActivityMainBinding(@NonNull LinearLayout rootView, @NonNull Button testA,
      @NonNull Button testB, @NonNull Button testC, @NonNull Switch toggleA,
      @NonNull Switch toggleB, @NonNull Switch toggleC) {
    this.rootView = rootView;
    this.testA = testA;
    this.testB = testB;
    this.testC = testC;
    this.toggleA = toggleA;
    this.toggleB = toggleB;
    this.toggleC = toggleC;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.testA;
      Button testA = ViewBindings.findChildViewById(rootView, id);
      if (testA == null) {
        break missingId;
      }

      id = R.id.testB;
      Button testB = ViewBindings.findChildViewById(rootView, id);
      if (testB == null) {
        break missingId;
      }

      id = R.id.testC;
      Button testC = ViewBindings.findChildViewById(rootView, id);
      if (testC == null) {
        break missingId;
      }

      id = R.id.toggleA;
      Switch toggleA = ViewBindings.findChildViewById(rootView, id);
      if (toggleA == null) {
        break missingId;
      }

      id = R.id.toggleB;
      Switch toggleB = ViewBindings.findChildViewById(rootView, id);
      if (toggleB == null) {
        break missingId;
      }

      id = R.id.toggleC;
      Switch toggleC = ViewBindings.findChildViewById(rootView, id);
      if (toggleC == null) {
        break missingId;
      }

      return new ActivityMainBinding((LinearLayout) rootView, testA, testB, testC, toggleA, toggleB,
          toggleC);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
